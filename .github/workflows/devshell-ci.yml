name: Generate Nickel Packages

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      packages:
        description: 'Specific packages to generate (comma-separated, or "all")'
        required: false
        default: 'all'
  push:
    paths:
      - 'flake.nix'
      - 'flake.lock'
      - '.amalgam-manifest.toml'
      - '.github/workflows/devshell-ci.yml'

jobs:
  generate-packages:
    runs-on: ubuntu-latest
    # Skip CI if ENABLE_CI is not set to 'true'
    if: github.event_name == 'workflow_dispatch' || vars.ENABLE_CI == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            # Add any custom binary caches here
            substituters = https://cache.nixos.org https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: Setup direnv
        run: |
          # Install direnv
          nix profile install nixpkgs#direnv nixpkgs#nix-direnv
          
          # Configure direnv
          echo "source_url \"https://raw.githubusercontent.com/nix-community/nix-direnv/master/direnvrc\" \"sha256-zelF0vLbEl5uaqrfIzbgNzJWGmLzCmYAkInj/LNxvKs=\"" > ~/.direnvrc
          
          # Allow the .envrc
          direnv allow
          
          # Export direnv hooks for bash
          eval "$(direnv hook bash)"

      - name: Setup Attic cache (if configured)
        if: env.ENABLE_ATTIC == 'true' && env.ATTIC_SERVER != '' && env.ATTIC_CACHE != ''
        env:
          ENABLE_ATTIC: ${{ secrets.ENABLE_ATTIC || 'false' }}
          ATTIC_SERVER: ${{ secrets.ATTIC_SERVER }}
          ATTIC_CACHE: ${{ secrets.ATTIC_CACHE }}
          ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}
        run: |
          # Load the dev shell via direnv
          eval "$(direnv export bash)"
          
          if [ -n "$ATTIC_TOKEN" ]; then
            attic login "$ATTIC_SERVER" "$ATTIC_TOKEN"
          fi
          
          attic use "$ATTIC_CACHE"
          attic watch-store "$ATTIC_CACHE" &

      - name: Generate packages
        env:
          ENABLE_ATTIC: ${{ secrets.ENABLE_ATTIC || 'false' }}
          ATTIC_SERVER: ${{ secrets.ATTIC_SERVER }}
          ATTIC_CACHE: ${{ secrets.ATTIC_CACHE }}
          ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}
        run: |
          # Load the dev shell environment via direnv
          eval "$(direnv export bash)"
          
          # Now we're in the dev shell with all tools available
          echo "Running CI pipeline with packages: ${{ github.event.inputs.packages || 'all' }}"
          
          # Print amalgam version for debugging
          echo "Amalgam version: $(amalgam --version)"
          
          # Use ci-runner directly since we're in the dev shell
          ci-runner ci ${{ github.event.inputs.packages }}

      - name: Check for changes
        id: changes
        run: |
          git add -A
          if git diff --staged --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git diff --staged --name-status
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update generated Nickel packages
            
            Generated using dev shell CI pipeline
            Packages: ${{ github.event.inputs.packages || 'all' }}
          title: "Update generated Nickel packages"
          body: |
            ## Automated Package Update
            
            This PR updates the generated Nickel packages using the dev shell CI pipeline.
            
            ### Configuration
            - **Packages**: `${{ github.event.inputs.packages || 'all' }}`
            - **Triggered by**: ${{ github.event_name }}
            
            ### What was done
            1. Generated packages using Amalgam (via dev shell)
            2. Validated all packages with `nickel typecheck`
            3. Generated documentation
            4. Pushed to Attic cache (if configured)
            
            ### Validation
            All packages have been validated and documentation has been updated.
            
            ---
            *Generated by [Amalgam](https://github.com/seryl/amalgam) via Nix development shell*
          branch: update-packages-${{ github.run_number }}
          delete-branch: true
          labels: |
            automated
            package-update

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generated-packages
          path: |
            pkgs/
            PACKAGES.md
          retention-days: 30

  # Simple flake check job
  flake-check:
    runs-on: ubuntu-latest
    # Skip CI if ENABLE_CI is not set to 'true'
    if: github.event_name == 'workflow_dispatch' || vars.ENABLE_CI == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run flake checks
        run: |
          nix flake check --print-build-logs